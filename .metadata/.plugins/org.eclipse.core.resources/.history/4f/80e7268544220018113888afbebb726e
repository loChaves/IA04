import java.io.IOException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import jade.core.AID;
import jade.core.Agent;
import jade.core.behaviours.CyclicBehaviour;
import jade.lang.acl.ACLMessage;

public class FactAgent extends Agent {
	protected void setup() {
		System.out.println(getName() + "--> Installed");

		addBehaviour(new FactBehaviour());
	}
	
	//Organise le calcul d’une factorielle
	public class FactBehaviour extends CyclicBehaviour {
		int n, i;
		double ans;
		ObjectMapper mapper = new ObjectMapper();
		Operation op;
		
		public void action(){
			ACLMessage rqtFact = new ACLMessage(ACLMessage.REQUEST);
			rqtFact.addReceiver(new AID("MULT", AID.ISLOCALNAME));
			
			ACLMessage message = receive();
			if(message != null){
				if(message.getPerformative() == ACLMessage.FAILURE){
					System.out.println(getName() + " : Error performing " + i + "!");
				}
				else if(message.getPerformative() == ACLMessage.INFORM){
					try {
						op = mapper.readValue(message.getContent(), Operation.class);
						
						ans = op.getArg1();
						
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
						System.out.println(getName() + " : Error! Wrong message received.");
					}
					
					if(op.getOperation().equals("Answer")){
						if(n == 1){
							System.out.println(getName() + " : " + i + "! = " + ans);
						}
						else{
							op = new Operation("Multiplication", n, ans);
							
							try {
								rqtFact.setContent(mapper.writeValueAsString(op));
							} catch (JsonProcessingException e) {
								e.printStackTrace();
							}
							send(rqtFact);
							
							n--;
						}
					}
					else{
						System.out.println(getName() + " : Error! " + op.getOperation() + " is not a valid operation.");
					}
				}
				else{
					String par = message.getContent();
					
					if (par.contains("!")) {
						String[] parameters = par.split("!");
						n = Integer.parseInt(parameters[0].trim());
						i = n;
						ans = 1;
						
						if(n < 0){
							System.out.println(getName() + " : Error! Please enter a positive value.");
						}
						else if(n > 1){
							Operation op = new Operation("Multiplication", n, n-1);
							
							try {
								rqtFact.setContent(mapper.writeValueAsString(op));
							} catch (JsonProcessingException e) {
								e.printStackTrace();
							}
							n = n-2;
							send(rqtFact);
						}
						else
							System.out.println(getName() + " : " + i + "! = " + ans);
					}
					else {
						System.out.println(getName() + " : Error! Unkwon request.");
						block();
					}
				}
			}
			else{
				block();
			}
		}
	}
}